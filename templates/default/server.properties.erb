# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=<%= node[:kafka][:broker_id] %>

############################# Socket Server Settings #############################

# The port the socket server listens on
port=<%= node[:kafka][:port] %>

# Hostname the broker will bind to and advertise to producers and consumers.
# If not set, the server will bind to all interfaces and advertise the value returned from
# from java.net.InetAddress.getCanonicalHostName().
<% if node[:kafka][:host_name] && !node[:kafka][:host_name].empty? %>
#host.name=localhost
<% else %>
host.name=<%= node[:kafka][:host_name] %>
<% end %>

# The number of threads handling network requests
num.network.threads=<%= node[:kafka][:network_threads] %>

# The number of threads doing disk I/O
num.io.threads=<%= node[:kafka][:io_threads] %>

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=<%= node[:kafka][:socket][:send_buffer_bytes] %>

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=<%= node[:kafka][:socket][:receive_buffer_bytes] %>

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=<%= node[:kafka][:socket][:request_max_bytes] %>

############################# Log Basics #############################

# The directory under which to store log files
log.dirs=<%= node[:kafka][:data_dir] %>

# The number of logical partitions per topic per server. More partitions allow greater parallelism
# for consumption, but also mean more files.
num.partitions=<%= node[:kafka][:num_partitions] %>

############################# Log Flush Policy #############################

# The following configurations control the flush of data to disk. This is the most
# important performance knob in kafka.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data is at greater risk of loss in the event of a crash.
#    2. Latency: Data is not made available to consumers until it is flushed (which adds latency).
#    3. Throughput: The flush is generally the most expensive operation.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages=<%= node[:kafka][:log][:flush_interval_messages] %>

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms=<%= node[:kafka][:log][:flush_interval_ms] %>

# Per-topic overrides for log.flush.interval.ms
#log.flush.intervals.ms.per.topic=topic1:1000, topic2:3000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours=<%= node[:kafka][:log][:retention_hours] %>

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
<% if node[:kafka][:log][:retention_bytes] %>
log.retention.bytes=<%= node[:kafka][:log][:retention_bytes] %>
<% end %>

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=<%= node[:kafka][:log][:segment_bytes] %>

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.cleanup.interval.mins=<%= node[:kafka][:log][:cleanup_interval_mins] %>

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=<%= node[:kafka][:zookeeper][:connect].join(',') %>

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=<%= node[:kafka][:zookeeper][:timeout] %>

# Metrics reporter properties
kafka.metrics.polling.interval.secs=<%= node[:kafka][:metrics][:polling_interval] %>
kafka.metrics.reporters=<%= node[:kafka][:metrics][:reporters].join(',') %>
kafka.csv.metrics.dir=<%= node[:kafka][:csv_metrics][:dir] %>
kafka.csv.metrics.reporter.enabled=<%= node[:kafka][:csv_metrics][:reporter_enabled] %>
